// Define global variable
$breakpoint-map: (
  "xs": 320px,
  "sm": 576px,
  "md": 768px,
  "lg": 992px,
  "xl": 1200px,
);

// Define global variable
$container-map: (
  "xs": 100%,
  "sm": 540px,
  "md": 720px,
  "lg": 960px,
  "xl": 1140px,
);

@function is-number($value) {
  @return type-of($value) == "number";
}

@function bp($target, $entries: $breakpoint-map) {
  // Pick the Values
  @if map-has-key($entries, $target) {
    @return map-get($entries, $target);
  } @else {
    @error 'The Breakpoint "#{$target}" are not available in the Breakpoint Map! Possible Breakpointkeys are: "#{map-keys($entries)}"';
    @return null;
  }
}

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> bp-first()
//    md
//    >> bp-first((xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> bp-first($breakpoint-names: (xs sm md lg xl))
//    md
@function bp-first(
  $breakpoints: $breakpoint-map,
  $breakpoint-names: map-keys($breakpoints)
) {
  @return nth($breakpoint-names, 1);
}

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> bp-next()
//    md
//    >> bp-next((xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> bp-next($breakpoint-names: (xs sm md lg xl))
//    md
@function bp-last(
  $breakpoints: $breakpoint-map,
  $breakpoint-names: map-keys($breakpoints)
) {
  @return nth($breakpoint-names, length($breakpoint-names));
}

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> bp-next(sm)
//    md
//    >> bp-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> bp-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function bp-next(
  $name,
  $breakpoints: $breakpoint-map,
  $breakpoint-names: map-keys($breakpoints)
) {
  $n: if(bp($name), index($breakpoint-names, $name), null);
  $n: index($breakpoint-names, $name);
  @return if(
    $n != null and $n < length($breakpoint-names),
    nth($breakpoint-names, $n + 1),
    null
  );
}


// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> bp-min-size(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function bp-min-size($bp, $breakpoints: $breakpoint-map) {
  @return if($bp != bp-first(), bp($bp), null);
  // map-get(map-get($breakpoints, $name), size),
  // $min: map-get($breakpoints, $name);
  // @return if($min != 0, $min, null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.02px
// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> bp-max-size(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767.98px
@function bp-max-size($bp, $breakpoints: $breakpoint-map) {
  $next: bp-next($bp, $breakpoints);
  @return if($next, bp($next) - 0.02, null);
  //bp-min-size($next, $breakpoints)
}


// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin break-up($bp, $breakpoints: $breakpoint-map, $dimension: width) {
  $min: if(is-number($bp), $bp, bp-min-size($bp, $breakpoints));
  @if $min {
    @media (min-#{$dimension}: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin break-down($bp, $breakpoints: $breakpoint-map, $dimension: width) {
  $max: if(is-number($bp), $bp, bp-max-size($bp, $breakpoints));
  @if $max {
    @media (max-#{$dimension}: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin break-at($size, $mode-or-size, $dimension: width) {
  @if is-number($mode-or-size) {
    $size-min: min($size, $mode-or-size);
    $size-max: max($size, $mode-or-size);

    @media (min-#{$dimension}: $size-min) and (max-#{$dimension}: $size-max) {
      @content;
    }
  } @else if $mode-or-size == max {
    @media (max-#{$dimension}: $size) {
      @content;
    }
  } @else if $mode-or-size == min {
    @media (min-#{$dimension}: $size) {
      @content;
    }
  } @else {
    @warn 'The mode "#{$mode-or-size}" are not recognized! Possible modes are: "min, max"';
    @content;
  }
}


// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin break-between(
  $lower,
  $upper,
  $breakpoints: $breakpoint-map,
  $dimension: width
) {
  $min: if(is-number($lower), $lower, bp-min-size($lower, $breakpoints));
  $max: if(is-number($upper), $upper, bp-max-size($upper, $breakpoints));

  // $min: bp-min-size($lower, $breakpoints);
  // $max: bp-max-size($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-#{$dimension}: $min) and (max-#{$dimension}: $max) {
      @content;
    }
  } @else if $max == null {
    @include break-up($lower, $breakpoints, $dimension) {
      @content;
    }
  } @else if $min == null {
    @include break-down($upper, $breakpoints, $dimension) {
      @content;
    }
  }
}


// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin break-only($bp, $breakpoints: $breakpoint-map, $dimension: width) {
  // @if (not index(map-keys($breakpoints), $name)) {
  //   @warn 'Mixin "break-only" does not accept number sizes.';
  // }

  $min: if(is-number($bp), $bp, bp-min-size($bp, $breakpoints));
  $max: if(is-number($bp), null, bp-max-size($bp, $breakpoints));

  @if $min != null and $max != null {
    @media (min-#{$dimension}: $min) and (max-#{$dimension}: $max) {
      @content;
    }
  } @else if $max == null {
    @include break-up($bp, $breakpoints, $dimension) {
      @content;
    }
  } @else if $min == null {
    @include break-down($bp, $breakpoints, $dimension) {
      @content;
    }
  }
  // }
}

@mixin break(
  $bp,
  $mode: auto,
  $breakpoints: $breakpoint-map,
  $dimension: width
) {
  // Check Target values
  @if length($bp) > 2 {
    @warn 'You can not use more than two target Values on the Breakpoint';
  } @else if length($bp) == 2 {
    // Between mode
    @include break-between(nth($bp, 1), nth($bp, 2), $breakpoints, $dimension) {
      @content;
    }
  } @else {
    // Min, Max or only Mode
    @if ($mode == up) {
      @include break-up($bp, $breakpoints, $dimension) {
        @content;
      }
    } @else if ($mode == down) {
      @include break-down($bp, $breakpoints, $dimension) {
        @content;
      }
    } @else {
      @include break-only($bp, $breakpoints, $dimension) {
        @content;
      }
    }
  }
}
